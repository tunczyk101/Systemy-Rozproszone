# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.9
#
# <auto-generated>
#
# Generated from file `SmartHomeDevices.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module SmartHomeDevices
_M_SmartHomeDevices = Ice.openModule('SmartHomeDevices')
__name__ = 'SmartHomeDevices'

if 'AlreadyOffError' not in _M_SmartHomeDevices.__dict__:
    _M_SmartHomeDevices.AlreadyOffError = Ice.createTempClass()
    class AlreadyOffError(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHomeDevices::AlreadyOffError'

    _M_SmartHomeDevices._t_AlreadyOffError = IcePy.defineException('::SmartHomeDevices::AlreadyOffError', AlreadyOffError, (), False, None, ())
    AlreadyOffError._ice_type = _M_SmartHomeDevices._t_AlreadyOffError

    _M_SmartHomeDevices.AlreadyOffError = AlreadyOffError
    del AlreadyOffError

if 'AlreadyOnError' not in _M_SmartHomeDevices.__dict__:
    _M_SmartHomeDevices.AlreadyOnError = Ice.createTempClass()
    class AlreadyOnError(Ice.UserException):
        def __init__(self):
            pass

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHomeDevices::AlreadyOnError'

    _M_SmartHomeDevices._t_AlreadyOnError = IcePy.defineException('::SmartHomeDevices::AlreadyOnError', AlreadyOnError, (), False, None, ())
    AlreadyOnError._ice_type = _M_SmartHomeDevices._t_AlreadyOnError

    _M_SmartHomeDevices.AlreadyOnError = AlreadyOnError
    del AlreadyOnError

_M_SmartHomeDevices._t_SmartDevice = IcePy.defineValue('::SmartHomeDevices::SmartDevice', Ice.Value, -1, (), False, True, None, ())

if 'SmartDevicePrx' not in _M_SmartHomeDevices.__dict__:
    _M_SmartHomeDevices.SmartDevicePrx = Ice.createTempClass()
    class SmartDevicePrx(Ice.ObjectPrx):

        def turnOn(self, context=None):
            return _M_SmartHomeDevices.SmartDevice._op_turnOn.invoke(self, ((), context))

        def turnOnAsync(self, context=None):
            return _M_SmartHomeDevices.SmartDevice._op_turnOn.invokeAsync(self, ((), context))

        def begin_turnOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeDevices.SmartDevice._op_turnOn.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOn(self, _r):
            return _M_SmartHomeDevices.SmartDevice._op_turnOn.end(self, _r)

        def turnOff(self, context=None):
            return _M_SmartHomeDevices.SmartDevice._op_turnOff.invoke(self, ((), context))

        def turnOffAsync(self, context=None):
            return _M_SmartHomeDevices.SmartDevice._op_turnOff.invokeAsync(self, ((), context))

        def begin_turnOff(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeDevices.SmartDevice._op_turnOff.begin(self, ((), _response, _ex, _sent, context))

        def end_turnOff(self, _r):
            return _M_SmartHomeDevices.SmartDevice._op_turnOff.end(self, _r)

        def isOn(self, context=None):
            return _M_SmartHomeDevices.SmartDevice._op_isOn.invoke(self, ((), context))

        def isOnAsync(self, context=None):
            return _M_SmartHomeDevices.SmartDevice._op_isOn.invokeAsync(self, ((), context))

        def begin_isOn(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeDevices.SmartDevice._op_isOn.begin(self, ((), _response, _ex, _sent, context))

        def end_isOn(self, _r):
            return _M_SmartHomeDevices.SmartDevice._op_isOn.end(self, _r)

        def getName(self, context=None):
            return _M_SmartHomeDevices.SmartDevice._op_getName.invoke(self, ((), context))

        def getNameAsync(self, context=None):
            return _M_SmartHomeDevices.SmartDevice._op_getName.invokeAsync(self, ((), context))

        def begin_getName(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeDevices.SmartDevice._op_getName.begin(self, ((), _response, _ex, _sent, context))

        def end_getName(self, _r):
            return _M_SmartHomeDevices.SmartDevice._op_getName.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHomeDevices.SmartDevicePrx.ice_checkedCast(proxy, '::SmartHomeDevices::SmartDevice', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHomeDevices.SmartDevicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHomeDevices::SmartDevice'
    _M_SmartHomeDevices._t_SmartDevicePrx = IcePy.defineProxy('::SmartHomeDevices::SmartDevice', SmartDevicePrx)

    _M_SmartHomeDevices.SmartDevicePrx = SmartDevicePrx
    del SmartDevicePrx

    _M_SmartHomeDevices.SmartDevice = Ice.createTempClass()
    class SmartDevice(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHomeDevices::SmartDevice')

        def ice_id(self, current=None):
            return '::SmartHomeDevices::SmartDevice'

        @staticmethod
        def ice_staticId():
            return '::SmartHomeDevices::SmartDevice'

        def turnOn(self, current=None):
            raise NotImplementedError("servant method 'turnOn' not implemented")

        def turnOff(self, current=None):
            raise NotImplementedError("servant method 'turnOff' not implemented")

        def isOn(self, current=None):
            raise NotImplementedError("servant method 'isOn' not implemented")

        def getName(self, current=None):
            raise NotImplementedError("servant method 'getName' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHomeDevices._t_SmartDeviceDisp)

        __repr__ = __str__

    _M_SmartHomeDevices._t_SmartDeviceDisp = IcePy.defineClass('::SmartHomeDevices::SmartDevice', SmartDevice, (), None, ())
    SmartDevice._ice_type = _M_SmartHomeDevices._t_SmartDeviceDisp

    SmartDevice._op_turnOn = IcePy.Operation('turnOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), (_M_SmartHomeDevices._t_AlreadyOnError,))
    SmartDevice._op_turnOff = IcePy.Operation('turnOff', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), (_M_SmartHomeDevices._t_AlreadyOffError,))
    SmartDevice._op_isOn = IcePy.Operation('isOn', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    SmartDevice._op_getName = IcePy.Operation('getName', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_string, False, 0), ())

    _M_SmartHomeDevices.SmartDevice = SmartDevice
    del SmartDevice

_M_SmartHomeDevices._t_Bulbulator = IcePy.defineValue('::SmartHomeDevices::Bulbulator', Ice.Value, -1, (), False, True, None, ())

if 'BulbulatorPrx' not in _M_SmartHomeDevices.__dict__:
    _M_SmartHomeDevices.BulbulatorPrx = Ice.createTempClass()
    class BulbulatorPrx(_M_SmartHomeDevices.SmartDevicePrx):

        def bulbul(self, context=None):
            return _M_SmartHomeDevices.Bulbulator._op_bulbul.invoke(self, ((), context))

        def bulbulAsync(self, context=None):
            return _M_SmartHomeDevices.Bulbulator._op_bulbul.invokeAsync(self, ((), context))

        def begin_bulbul(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeDevices.Bulbulator._op_bulbul.begin(self, ((), _response, _ex, _sent, context))

        def end_bulbul(self, _r):
            return _M_SmartHomeDevices.Bulbulator._op_bulbul.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHomeDevices.BulbulatorPrx.ice_checkedCast(proxy, '::SmartHomeDevices::Bulbulator', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHomeDevices.BulbulatorPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHomeDevices::Bulbulator'
    _M_SmartHomeDevices._t_BulbulatorPrx = IcePy.defineProxy('::SmartHomeDevices::Bulbulator', BulbulatorPrx)

    _M_SmartHomeDevices.BulbulatorPrx = BulbulatorPrx
    del BulbulatorPrx

    _M_SmartHomeDevices.Bulbulator = Ice.createTempClass()
    class Bulbulator(_M_SmartHomeDevices.SmartDevice):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHomeDevices::Bulbulator', '::SmartHomeDevices::SmartDevice')

        def ice_id(self, current=None):
            return '::SmartHomeDevices::Bulbulator'

        @staticmethod
        def ice_staticId():
            return '::SmartHomeDevices::Bulbulator'

        def bulbul(self, current=None):
            raise NotImplementedError("servant method 'bulbul' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHomeDevices._t_BulbulatorDisp)

        __repr__ = __str__

    _M_SmartHomeDevices._t_BulbulatorDisp = IcePy.defineClass('::SmartHomeDevices::Bulbulator', Bulbulator, (), None, (_M_SmartHomeDevices._t_SmartDeviceDisp,))
    Bulbulator._ice_type = _M_SmartHomeDevices._t_BulbulatorDisp

    Bulbulator._op_bulbul = IcePy.Operation('bulbul', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), None, ())

    _M_SmartHomeDevices.Bulbulator = Bulbulator
    del Bulbulator

_M_SmartHomeDevices._t_Camera = IcePy.defineValue('::SmartHomeDevices::Camera', Ice.Value, -1, (), False, True, None, ())

if 'CameraPrx' not in _M_SmartHomeDevices.__dict__:
    _M_SmartHomeDevices.CameraPrx = Ice.createTempClass()
    class CameraPrx(_M_SmartHomeDevices.SmartDevicePrx):

        def takePicture(self, context=None):
            return _M_SmartHomeDevices.Camera._op_takePicture.invoke(self, ((), context))

        def takePictureAsync(self, context=None):
            return _M_SmartHomeDevices.Camera._op_takePicture.invokeAsync(self, ((), context))

        def begin_takePicture(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeDevices.Camera._op_takePicture.begin(self, ((), _response, _ex, _sent, context))

        def end_takePicture(self, _r):
            return _M_SmartHomeDevices.Camera._op_takePicture.end(self, _r)

        def startRecording(self, context=None):
            return _M_SmartHomeDevices.Camera._op_startRecording.invoke(self, ((), context))

        def startRecordingAsync(self, context=None):
            return _M_SmartHomeDevices.Camera._op_startRecording.invokeAsync(self, ((), context))

        def begin_startRecording(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeDevices.Camera._op_startRecording.begin(self, ((), _response, _ex, _sent, context))

        def end_startRecording(self, _r):
            return _M_SmartHomeDevices.Camera._op_startRecording.end(self, _r)

        def stopRecording(self, context=None):
            return _M_SmartHomeDevices.Camera._op_stopRecording.invoke(self, ((), context))

        def stopRecordingAsync(self, context=None):
            return _M_SmartHomeDevices.Camera._op_stopRecording.invokeAsync(self, ((), context))

        def begin_stopRecording(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeDevices.Camera._op_stopRecording.begin(self, ((), _response, _ex, _sent, context))

        def end_stopRecording(self, _r):
            return _M_SmartHomeDevices.Camera._op_stopRecording.end(self, _r)

        def isRecording(self, context=None):
            return _M_SmartHomeDevices.Camera._op_isRecording.invoke(self, ((), context))

        def isRecordingAsync(self, context=None):
            return _M_SmartHomeDevices.Camera._op_isRecording.invokeAsync(self, ((), context))

        def begin_isRecording(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeDevices.Camera._op_isRecording.begin(self, ((), _response, _ex, _sent, context))

        def end_isRecording(self, _r):
            return _M_SmartHomeDevices.Camera._op_isRecording.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHomeDevices.CameraPrx.ice_checkedCast(proxy, '::SmartHomeDevices::Camera', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHomeDevices.CameraPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHomeDevices::Camera'
    _M_SmartHomeDevices._t_CameraPrx = IcePy.defineProxy('::SmartHomeDevices::Camera', CameraPrx)

    _M_SmartHomeDevices.CameraPrx = CameraPrx
    del CameraPrx

    _M_SmartHomeDevices.Camera = Ice.createTempClass()
    class Camera(_M_SmartHomeDevices.SmartDevice):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHomeDevices::Camera', '::SmartHomeDevices::SmartDevice')

        def ice_id(self, current=None):
            return '::SmartHomeDevices::Camera'

        @staticmethod
        def ice_staticId():
            return '::SmartHomeDevices::Camera'

        def takePicture(self, current=None):
            raise NotImplementedError("servant method 'takePicture' not implemented")

        def startRecording(self, current=None):
            raise NotImplementedError("servant method 'startRecording' not implemented")

        def stopRecording(self, current=None):
            raise NotImplementedError("servant method 'stopRecording' not implemented")

        def isRecording(self, current=None):
            raise NotImplementedError("servant method 'isRecording' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHomeDevices._t_CameraDisp)

        __repr__ = __str__

    _M_SmartHomeDevices._t_CameraDisp = IcePy.defineClass('::SmartHomeDevices::Camera', Camera, (), None, (_M_SmartHomeDevices._t_SmartDeviceDisp,))
    Camera._ice_type = _M_SmartHomeDevices._t_CameraDisp

    Camera._op_takePicture = IcePy.Operation('takePicture', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())
    Camera._op_startRecording = IcePy.Operation('startRecording', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), (_M_SmartHomeDevices._t_AlreadyOnError,))
    Camera._op_stopRecording = IcePy.Operation('stopRecording', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), IcePy._t_bool, False, 0), (_M_SmartHomeDevices._t_AlreadyOffError,))
    Camera._op_isRecording = IcePy.Operation('isRecording', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_bool, False, 0), ())

    _M_SmartHomeDevices.Camera = Camera
    del Camera

if 'PTZ' not in _M_SmartHomeDevices.__dict__:
    _M_SmartHomeDevices.PTZ = Ice.createTempClass()
    class PTZ(Ice.Value):
        def __init__(self, pan=Ice.Unset, tilt=Ice.Unset, zoom=Ice.Unset):
            self.pan = pan
            self.tilt = tilt
            self.zoom = zoom

        def ice_id(self):
            return '::SmartHomeDevices::PTZ'

        @staticmethod
        def ice_staticId():
            return '::SmartHomeDevices::PTZ'

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHomeDevices._t_PTZ)

        __repr__ = __str__

    _M_SmartHomeDevices._t_PTZ = IcePy.defineValue('::SmartHomeDevices::PTZ', PTZ, -1, (), False, False, None, (
        ('pan', (), IcePy._t_short, True, 0),
        ('tilt', (), IcePy._t_short, True, 1),
        ('zoom', (), IcePy._t_short, True, 2)
    ))
    PTZ._ice_type = _M_SmartHomeDevices._t_PTZ

    _M_SmartHomeDevices.PTZ = PTZ
    del PTZ

if 'RangeError' not in _M_SmartHomeDevices.__dict__:
    _M_SmartHomeDevices.RangeError = Ice.createTempClass()
    class RangeError(Ice.UserException):
        def __init__(self, minValue=0, maxValue=0):
            self.minValue = minValue
            self.maxValue = maxValue

        def __str__(self):
            return IcePy.stringifyException(self)

        __repr__ = __str__

        _ice_id = '::SmartHomeDevices::RangeError'

    _M_SmartHomeDevices._t_RangeError = IcePy.defineException('::SmartHomeDevices::RangeError', RangeError, (), False, None, (
        ('minValue', (), IcePy._t_int, False, 0),
        ('maxValue', (), IcePy._t_int, False, 0)
    ))
    RangeError._ice_type = _M_SmartHomeDevices._t_RangeError

    _M_SmartHomeDevices.RangeError = RangeError
    del RangeError

_M_SmartHomeDevices._t_PTZCamera = IcePy.defineValue('::SmartHomeDevices::PTZCamera', Ice.Value, -1, (), False, True, None, ())

if 'PTZCameraPrx' not in _M_SmartHomeDevices.__dict__:
    _M_SmartHomeDevices.PTZCameraPrx = Ice.createTempClass()
    class PTZCameraPrx(_M_SmartHomeDevices.CameraPrx):

        def getPTZ(self, context=None):
            return _M_SmartHomeDevices.PTZCamera._op_getPTZ.invoke(self, ((), context))

        def getPTZAsync(self, context=None):
            return _M_SmartHomeDevices.PTZCamera._op_getPTZ.invokeAsync(self, ((), context))

        def begin_getPTZ(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeDevices.PTZCamera._op_getPTZ.begin(self, ((), _response, _ex, _sent, context))

        def end_getPTZ(self, _r):
            return _M_SmartHomeDevices.PTZCamera._op_getPTZ.end(self, _r)

        def setPTZ(self, ptz, context=None):
            return _M_SmartHomeDevices.PTZCamera._op_setPTZ.invoke(self, ((ptz, ), context))

        def setPTZAsync(self, ptz, context=None):
            return _M_SmartHomeDevices.PTZCamera._op_setPTZ.invokeAsync(self, ((ptz, ), context))

        def begin_setPTZ(self, ptz, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeDevices.PTZCamera._op_setPTZ.begin(self, ((ptz, ), _response, _ex, _sent, context))

        def end_setPTZ(self, _r):
            return _M_SmartHomeDevices.PTZCamera._op_setPTZ.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHomeDevices.PTZCameraPrx.ice_checkedCast(proxy, '::SmartHomeDevices::PTZCamera', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHomeDevices.PTZCameraPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHomeDevices::PTZCamera'
    _M_SmartHomeDevices._t_PTZCameraPrx = IcePy.defineProxy('::SmartHomeDevices::PTZCamera', PTZCameraPrx)

    _M_SmartHomeDevices.PTZCameraPrx = PTZCameraPrx
    del PTZCameraPrx

    _M_SmartHomeDevices.PTZCamera = Ice.createTempClass()
    class PTZCamera(_M_SmartHomeDevices.Camera):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHomeDevices::Camera', '::SmartHomeDevices::PTZCamera', '::SmartHomeDevices::SmartDevice')

        def ice_id(self, current=None):
            return '::SmartHomeDevices::PTZCamera'

        @staticmethod
        def ice_staticId():
            return '::SmartHomeDevices::PTZCamera'

        def getPTZ(self, current=None):
            raise NotImplementedError("servant method 'getPTZ' not implemented")

        def setPTZ(self, ptz, current=None):
            raise NotImplementedError("servant method 'setPTZ' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHomeDevices._t_PTZCameraDisp)

        __repr__ = __str__

    _M_SmartHomeDevices._t_PTZCameraDisp = IcePy.defineClass('::SmartHomeDevices::PTZCamera', PTZCamera, (), None, (_M_SmartHomeDevices._t_CameraDisp,))
    PTZCamera._ice_type = _M_SmartHomeDevices._t_PTZCameraDisp

    PTZCamera._op_getPTZ = IcePy.Operation('getPTZ', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), _M_SmartHomeDevices._t_PTZ, False, 0), ())
    PTZCamera._op_setPTZ = IcePy.Operation('setPTZ', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (((), _M_SmartHomeDevices._t_PTZ, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_SmartHomeDevices._t_RangeError,))

    _M_SmartHomeDevices.PTZCamera = PTZCamera
    del PTZCamera

_M_SmartHomeDevices._t_SmartTV = IcePy.defineValue('::SmartHomeDevices::SmartTV', Ice.Value, -1, (), False, True, None, ())

if 'SmartTVPrx' not in _M_SmartHomeDevices.__dict__:
    _M_SmartHomeDevices.SmartTVPrx = Ice.createTempClass()
    class SmartTVPrx(_M_SmartHomeDevices.SmartDevicePrx):

        def changeChannel(self, channelNumber, context=None):
            return _M_SmartHomeDevices.SmartTV._op_changeChannel.invoke(self, ((channelNumber, ), context))

        def changeChannelAsync(self, channelNumber, context=None):
            return _M_SmartHomeDevices.SmartTV._op_changeChannel.invokeAsync(self, ((channelNumber, ), context))

        def begin_changeChannel(self, channelNumber, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeDevices.SmartTV._op_changeChannel.begin(self, ((channelNumber, ), _response, _ex, _sent, context))

        def end_changeChannel(self, _r):
            return _M_SmartHomeDevices.SmartTV._op_changeChannel.end(self, _r)

        def getCurrentChannel(self, context=None):
            return _M_SmartHomeDevices.SmartTV._op_getCurrentChannel.invoke(self, ((), context))

        def getCurrentChannelAsync(self, context=None):
            return _M_SmartHomeDevices.SmartTV._op_getCurrentChannel.invokeAsync(self, ((), context))

        def begin_getCurrentChannel(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_SmartHomeDevices.SmartTV._op_getCurrentChannel.begin(self, ((), _response, _ex, _sent, context))

        def end_getCurrentChannel(self, _r):
            return _M_SmartHomeDevices.SmartTV._op_getCurrentChannel.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_SmartHomeDevices.SmartTVPrx.ice_checkedCast(proxy, '::SmartHomeDevices::SmartTV', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_SmartHomeDevices.SmartTVPrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::SmartHomeDevices::SmartTV'
    _M_SmartHomeDevices._t_SmartTVPrx = IcePy.defineProxy('::SmartHomeDevices::SmartTV', SmartTVPrx)

    _M_SmartHomeDevices.SmartTVPrx = SmartTVPrx
    del SmartTVPrx

    _M_SmartHomeDevices.SmartTV = Ice.createTempClass()
    class SmartTV(_M_SmartHomeDevices.SmartDevice):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::SmartHomeDevices::SmartDevice', '::SmartHomeDevices::SmartTV')

        def ice_id(self, current=None):
            return '::SmartHomeDevices::SmartTV'

        @staticmethod
        def ice_staticId():
            return '::SmartHomeDevices::SmartTV'

        def changeChannel(self, channelNumber, current=None):
            raise NotImplementedError("servant method 'changeChannel' not implemented")

        def getCurrentChannel(self, current=None):
            raise NotImplementedError("servant method 'getCurrentChannel' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_SmartHomeDevices._t_SmartTVDisp)

        __repr__ = __str__

    _M_SmartHomeDevices._t_SmartTVDisp = IcePy.defineClass('::SmartHomeDevices::SmartTV', SmartTV, (), None, (_M_SmartHomeDevices._t_SmartDeviceDisp,))
    SmartTV._ice_type = _M_SmartHomeDevices._t_SmartTVDisp

    SmartTV._op_changeChannel = IcePy.Operation('changeChannel', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), ((), IcePy._t_bool, False, 0), (_M_SmartHomeDevices._t_RangeError,))
    SmartTV._op_getCurrentChannel = IcePy.Operation('getCurrentChannel', Ice.OperationMode.Idempotent, Ice.OperationMode.Idempotent, False, None, (), (), (), ((), IcePy._t_int, False, 0), ())

    _M_SmartHomeDevices.SmartTV = SmartTV
    del SmartTV

# End of module SmartHomeDevices
